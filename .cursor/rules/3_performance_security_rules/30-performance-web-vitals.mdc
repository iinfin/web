---
description: Web Performance Optimization and Core Web Vitals Rule
globs: ["**/*.ts", "**/*.tsx", "next.config.ts"]
alwaysApply: true
---
<rule>

<id>3_performance_security_rules/30-performance-web-vitals</id>
<title>Performance Optimization (Core Web Vitals & Bundle Size)</title>

<description>
Ensures code, configuration, and architecture adhere to best practices for optimal web performance, focusing explicitly on improving Core Web Vitals (LCP, FID/INP, CLS) and minimizing client-side bundle size within the Next.js framework.
</description>

<context>
Excellent web performance is critical for user experience, engagement, and SEO. Core Web Vitals provide standardized metrics to measure this. Optimizing LCP, FID/INP, and CLS, along with reducing JavaScript bundle size, directly leads to faster loading times, smoother interactions, and a more stable layout.
</context>

<guidelines>
1.  **Largest Contentful Paint (LCP)**:
    *   Optimize critical above-the-fold images using `next/image` with the `priority` prop. Use modern formats (AVIF/WebP) and correct sizing.
    *   Ensure fast server response times (TTFB) by leveraging Next.js data caching (`cache`, `revalidate`) and fetch caching (`force-cache`).
    *   Minimize render-blocking resources: Use `next/font` for efficient font loading, defer non-critical scripts (`strategy="lazyOnload"` or `"afterInteractive"`), and consider critical CSS extraction patterns if needed.
    *   Avoid complex Server Component data fetching that significantly delays initial HTML generation.
2.  **First Input Delay (FID) / Interaction to Next Paint (INP)**:
    *   Minimize main thread blocking. Break down long JavaScript tasks using techniques like web workers or scheduling (`requestIdleCallback`).
    *   Reduce the amount and complexity of client-side JavaScript. Strongly prefer Server Components over Client Components wherever possible.
    *   Optimize event handlers in Client Components; keep them lightweight and debounce/throttle frequent events.
    *   Analyze and optimize third-party scripts. Load them asynchronously (`async`/`defer`) or using `next/script` strategies. Evaluate their performance impact.
    *   Use React performance patterns like `useMemo`, `useCallback` judiciously after profiling (see <id>1_technical_stack_rules/11-react-patterns</id>).
3.  **Cumulative Layout Shift (CLS)**:
    *   Always provide explicit `width` and `height` attributes for images, videos, ads, and iframes to allow the browser to reserve space. Use `next/image` which enforces this for images.
    *   Avoid dynamically inserting content above existing content unless it's a direct response to user interaction.
    *   Ensure web fonts load without causing significant layout shifts by using `next/font` which handles font fallback configuration and preloading.
    *   Ensure animations primarily use `transform` and `opacity` (via CSS or Framer Motion) which do not trigger layout changes (see <id>1_technical_stack_rules/14-framer-motion-animations</id>).
4.  **Bundle Size**:
    *   Actively monitor client-side JavaScript bundle size using `@next/bundle-analyzer`.
    *   Utilize dynamic imports (`next/dynamic`) for large Client Components or libraries that are not needed for the initial page load (e.g., modals, complex charts, below-the-fold sections).
    *   Prefer Server Components to eliminate unnecessary client-side JavaScript.
    *   Carefully evaluate third-party libraries for their bundle size impact using tools like `bundlephobia.com` before adding them.
    *   Ensure efficient code splitting (largely handled by Next.js App Router, but dynamic imports offer manual control).
5.  **Caching Strategies**: Implement appropriate caching for data fetching (`fetch` options like `cache: 'force-cache'`, `next: { revalidate: number }`), Route Handlers, and leverage the Next.js Full Route Cache where applicable.
</guidelines>

<implementation>
-   **Tooling**: `@next/bundle-analyzer`, Browser DevTools (Performance, Network tabs), Lighthouse, WebPageTest, `bundlephobia.com`.
-   **Components**: `next/image`, `next/font`, `next/script`, `next/dynamic`.
-   **Configuration**: Next.js caching options in `fetch` calls.
-   **Code Review**: Focus on image handling, font loading, Client vs. Server Component usage, dynamic imports, and caching strategies.
-   **AI Actions**:
    *   **Reject**: Use of standard `<img>` tags without `width`/`height`; strongly suggest `next/image`.
    *   **Suggest**: Adding `priority` prop to `next/image` for LCP elements.
    *   **Reject**: Direct font loading (e.g., `<link rel="stylesheet">` in `layout.tsx`) without using `next/font`.
    *   **Suggest**: Analyzing bundle size and using `next/dynamic` for potentially large Client Components or libraries.
    *   **Suggest**: Reviewing data fetching for caching opportunities (`fetch` options, React `cache`).
    *   **Suggest**: Identifying Client Components that could potentially be Server Components to reduce bundle size.
    *   **Warn**: About potentially blocking long tasks or heavy computations on the main thread in Client Components.
</implementation>

<examples>
<positive title="✅ Correct: Optimized Image & Font Loading">
```typescript
// src/app/layout.tsx
import { Inter } from 'next/font/google';

// Configure font loading via next/font
const inter = Inter({ subsets: ['latin'], display: 'swap' });

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className={inter.className}> {/* Apply font class */}
      <head>
        <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet" />
      </head>
      <body>{children}</body>
    </html>
  );
}

// src/app/page.tsx
import Image from 'next/image';

export default function HomePage() {
  return (
    <main>
      <Image
        src="/images/hero-banner.avif"
        alt="Hero Banner"
        width={1600}
        height={800}
        priority
        className="w-full h-auto"
      />
    </main>
  );
}
```
</positive>

<positive title="✅ Correct: Dynamic Import for Large Client Component">
```typescript
// src/app/dashboard/page.tsx
import dynamic from 'next/dynamic';

// Dynamically import a heavy client-side charting library/component
const AnalyticsChart = dynamic(() => import('@/components/AnalyticsChart'), {
  ssr: false,
  loading: () => <div className="h-64 flex items-center justify-center">Loading Chart...</div>,
});

export default function DashboardPage() {
  return (
    <div>
      <h1>Dashboard</h1>
      <AnalyticsChart />
    </div>
  );
}
```
</positive>

<negative title="❌ Incorrect: Performance Anti-Patterns">
```typescript
// Bad: Using standard <img> without dimensions, causing CLS
function BadImage() {
  return <img src="/images/logo.png" alt="Logo" />;
}

// Bad: Loading fonts via external CSS link in layout - potential FOUT/CLS
function Layout({ children }) {
  return (
    <html>
      <head>
        <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet" />
      </head>
      <body>{children}</body>
    </html>
  );
}

// Bad: Directly importing a large library in a component rendered high up the tree
// (assuming it's not needed immediately)
import confetti from 'canvas-confetti';

function SomeClientComponent() {
  return <button>Click Me</button>;
}
```
</negative>
</examples>

<benefits>
-   Improves user experience through faster loading and smoother interactions.
-   Positively impacts SEO rankings due to better Core Web Vitals scores.
-   Reduces bounce rates and increases user engagement.
-   Optimizes resource usage (bandwidth, CPU).
-   Leads to a more professional and polished application feel.
</benefits>

<scope>
Applies to all code and configuration related to front-end performance, including component implementation (`.tsx`), image handling, font loading, script loading, data fetching strategies, and Next.js configuration.
</scope>

<references>
-   [Google web.dev: Core Web Vitals](https://web.dev/vitals/)
-   [Next.js Documentation: Optimizing](https://nextjs.org/docs/app/building-your-application/optimizing)
-   [Next.js `next/image` Component](https://nextjs.org/docs/app/api-reference/components/image)
-   [Next.js `next/font` Component](https://nextjs.org/docs/app/api-reference/components/font)
-   [Next.js `next/dynamic` Component](https://nextjs.org/docs/app/api-reference/components/dynamic)
-   [Next.js Caching](https://nextjs.org/docs/app/building-your-application/caching)
-   [`@next/bundle-analyzer`](https://github.com/vercel/next.js/tree/canary/packages/next-bundle-analyzer)
-   <id>1_technical_stack_rules/11-react-patterns</id>
-   <id>1_technical_stack_rules/14-framer-motion-animations</id>
</references>

</rule>
