---
description:
globs:
alwaysApply: true
---
<rule>

<id>2_quality_and_architecture_rules/24-refactoring</id>
<title>Refactoring for Clarity, Symmetry, and Order</title>

<description>
Provides guidelines for refactoring code to improve clarity, consistency, and structural harmony without altering core logic or visual output. Focuses on meticulous organization, symmetrical patterns, and balanced naming to enhance readability and maintainability.
</description>

<context>
Refactoring is essential for maintaining a healthy codebase. These guidelines focus on non-functional improvements, aiming for code that is not just correct but also clean, consistent, and aesthetically balanced, reducing cognitive load and simplifying future development.
</context>

<guidelines>
1.  **Preserve Core Logic & Behavior**:
    *   Refactoring MUST NOT alter the fundamental algorithm, business logic, or intended behavior of the code.
    *   Do not introduce or fix bugs as part of aesthetic refactoring; address functional issues separately.
    *   State management patterns and data flow MUST remain unchanged unless explicitly part of a larger, planned architectural refactor.

2.  **Harmonious Naming Patterns**:
    *   Choose component, function, variable, and file names that are clear, descriptive, and consistent.
    *   For parallel concepts or structures, use parallel naming conventions (e.g., `fetchUserData`, `parseUserData`; `UserCard`, `ProductCard`).
    *   Consider phonetic and visual rhythm when naming related elements.
    *   Strictly adhere to established casing conventions (PascalCase for components/types, camelCase for functions/variables).

3.  **Visual Code Symmetry & Formatting**:
    *   Apply consistent formatting (indentation, spacing, line breaks) across the entire codebase, relying on automated tools like Prettier.
    *   Structure similar components or functions with identical code organization (e.g., order of hooks, state declarations, helper functions, return statement).
    *   Align related code blocks, props, or arguments vertically where it enhances readability.
    *   Use consistent comment styles and placement (see <id>2_quality_and_architecture_rules/23-code-comments</id>).

4.  **Class and Style Organization (Tailwind)**:
    *   Group Tailwind classes logically and consistently, typically following Prettier plugin order (base, layout, spacing, typography, effects, etc.).
    *   Ensure consistent application of conditional classes (e.g., using `clsx` utility).
    *   Maintain visual similarity in the class structure of parallel elements.

5.  **Structural Parallelism**:
    *   Ensure similar components share a parallel internal structure (e.g., props interface, hook usage, rendering logic order).
    *   Organize imports consistently (e.g., React imports, external libs, internal absolute, internal relative) using automated sorting (ESLint/Prettier).
    *   Maintain consistent export patterns (e.g., prefer named exports, default export for page/layout components).

6.  **Refactoring for Balance & Clarity**:
    *   Break down overly complex functions or components into smaller, single-responsibility units (see <id>2_quality_and_architecture_rules/21-component-design</id>).
    *   Eliminate redundant code or comments.
    *   Improve clarity by simplifying complex expressions or conditional logic where possible without changing behavior.
    *   Ensure all references (imports, function calls) are meticulously updated when renaming files or exports.
</guidelines>

<implementation>
-   **Tooling**: Rely heavily on automated formatters (Prettier) and linters (ESLint/XO) to enforce basic consistency.
-   **Process**:
    *   Identify areas for improvement (inconsistent naming, formatting, structure).
    *   Apply changes systematically and locally first.
    *   Use version control effectively (commit small, focused refactoring changes).
    *   Verify thoroughly (build, tests, manual checks) that no behavior has changed.
-   **Code Review**: Refactoring changes should be reviewed to ensure they adhere to these principles and haven't inadvertently altered logic.
-   **AI Actions**:
    *   When asked to refactor, focus *only* on clarity, consistency, naming, and structure as defined here, unless specifically asked to change logic.
    *   **Suggest**: Renaming elements for better consistency or clarity.
    *   **Suggest**: Restructuring code blocks for better visual symmetry or organization.
    *   **Apply**: Consistent formatting and import sorting using Prettier/ESLint rules.
    *   **Verify**: Ensure all references are updated after renaming.
    *   **State**: Explicitly state that the refactoring preserves the original logic and behavior.
</implementation>

<examples>
<positive title="✅ Symmetrical Component Structure">
```typescript
// Two related components with parallel structure and naming

// components/info/InfoCard.tsx
interface InfoCardProps { title: string; content: string; }
export function InfoCard({ title, content }: InfoCardProps) {
  return (
    <div className="p-4 border rounded">
      <h3 className="font-semibold">{title}</h3>
      <p>{content}</p>
    </div>
  );
}

// components/alert/AlertBox.tsx
interface AlertBoxProps { type: 'warning' | 'error'; message: string; }
export function AlertBox({ type, message }: AlertBoxProps) {
  const bgColor = type === 'warning' ? 'bg-yellow-100' : 'bg-red-100';
  return (
    <div className={`p-4 border rounded ${bgColor}`}>
      <h3 className="font-semibold">{type === 'warning' ? 'Warning' : 'Error'}</h3>
      <p>{message}</p>
    </div>
  );
}
```
</positive>

<positive title="✅ Harmonious Naming & Formatting">
```typescript
// Consistent async function naming and formatting
async function fetchConfiguration(configId: string): Promise<Config | null> {
  // ... logic
  return config;
}

async function updateConfiguration(config: Config): Promise<boolean> {
  // ... logic
  return success;
}

// Consistent state naming
const [isLoading, setIsLoading] = useState<boolean>(false);
const [isValid, setIsValid] = useState<boolean>(true);
const [hasError, setHasError] = useState<boolean>(false);
```
</positive>

<negative title="❌ Asymmetrical Structure & Naming (Avoid)">
```typescript
// Inconsistent structure, naming, and formatting

// components/details/DetailsPanel.tsx
function DetailsPanel(props: { title: string, data: any[] }) {
  // ... hooks and logic ...
  return (<div className="bg-gray-50 p-2 border">
    <h4>{props.title}</h4>
    {/* ... rendering data */}
  </div>)
}

// components/summary/SummaryView.js // Inconsistent file extension and casing
const getSummary = ({ id, name }) => {
  // ... different logic structure ...
  let summaryText = `Summary for ${name}`;
  return <section className='p-5 shadow-lg'> {/* Inconsistent quotes */}
    <h1>Summary</h1>
    <p>{summaryText}</p>
  </section>
}

// Inconsistent state naming
const [loadingState, setLoading] = useState(false);
const [errorOccurred, setError] = useState(null);
```
</negative>
</examples>

<benefits>
-   Reduces cognitive load required to understand the code.
-   Enhances readability and visual appeal of the codebase.
-   Improves maintainability through predictable patterns.
-   Makes identifying deviations and potential issues easier.
-   Facilitates smoother onboarding for new developers.
</benefits>

<scope>
Applies to all source code files within the project during dedicated refactoring efforts or general code cleanup. Focuses on non-functional improvements.
</scope>

<references>
-   [Clean Code by Robert C. Martin](https://www.oreilly.com/library/view/clean-code-a/9780136083238/) (Conceptual principles)
-   [Refactoring by Martin Fowler](https://martinfowler.com/books/refactoring.html) (Conceptual principles)
-   <id>2_quality_and_architecture_rules/20-code-quality-eslint-xo</id>
-   <id>2_quality_and_architecture_rules/21-component-design</id>
-   <id>2_quality_and_architecture_rules/23-code-comments</id>
</references>

</rule>
