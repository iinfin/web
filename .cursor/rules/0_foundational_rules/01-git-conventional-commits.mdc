---
description: Enforces and automates Conventional Commits tailored for this project.
globs: []
alwaysApply: true
---
<rule>

<id>0_foundational_rules/01-git-conventional-commits</id>
<title>Git Conventional Commits</title>

<description>
Defines and enforces the use of the Conventional Commits specification for all Git commits. This ensures a consistent, semantic commit history suitable for automated changelog generation, versioning, and improved collaboration. Includes project-specific types/scopes and guides both manual and AI-driven commit processes.
</description>

<context>
A standardized commit message format is essential for maintaining a clear project history, automating release processes (like version bumping and changelog generation via semantic-release), and making it easier for humans and machines to understand the nature of changes over time.
</context>

<guidelines>

  <section title="General Commit Message Format">
    <format>
```
type(scope): subject
[optional body]
[optional footer(s)]
```
    </format>
    <rules>
      - **Header (`type(scope): subject`)**:
        - **Type**: MUST be one of the **Project-Specific Types** listed below.
        - **Scope** (Optional): Parentheses containing a noun describing the section of the codebase affected (e.g., `components`, `api`, `config`). MUST be one of the **Project-Specific Scopes** below, if used.
        - **Subject**: Concise description of the change.
          - Use imperative, present tense (e.g., "add", "fix", "change" not "added", "fixed", "changes").
          - Lowercase first letter.
          - No period (.) at the end.
          - Max 100 characters for the entire header line.
      - **Body** (Optional):
        - Provides additional context or reasoning for the change.
        - MUST be separated from the subject by a blank line.
        - Use imperative, present tense.
        - Wrap lines at 72 characters for readability in Git tools.
      - **Footer** (Optional):
        - MUST be separated from the body by a blank line.
        - Contains metadata like issue tracker references (`Closes #123`, `Refs #456`) or breaking change information.
      - **Breaking Changes**:
        - Indicate with `BREAKING CHANGE:` prefix in the footer, followed by a description.
        - Optionally, use `!` after the type/scope in the header (e.g., `feat(api)!: ...`) for emphasis.
    </rules>
  </section>

  <section title="Project-Specific Types">
    *(MUST use one)*
    - `feat`: A new feature for the user.
    - `fix`: A bug fix for the user.
    - `docs`: Documentation only changes.
    - `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc).
    - `refactor`: A code change that neither fixes a bug nor adds a feature.
    - `perf`: A code change that improves performance.
    - `test`: Adding missing tests or correcting existing tests.
    - `build`: Changes that affect the build system or external dependencies (e.g., gulp, broccoli, npm).
    - `ci`: Changes to CI configuration files and scripts (e.g., Travis, Circle, BrowserStack, SauceLabs).
    - `chore`: Other changes that don't modify `src` or `test` files.
    - `revert`: Reverts a previous commit.
    - **`animation`**: Changes related to animations and motion (Framer Motion).
    - **`content`**: Content updates like text or images.
    - **`layout`**: Layout and design changes.
    - **`a11y`**: Accessibility improvements.
    - **`r3f`**: Changes specific to React Three Fiber / 3D scenes.
  </section>

  <section title="Project-Specific Scopes">
    *(Optional, use one or more relevant scopes)*
    - `components`, `pages`, `api`, `hooks`, `lib`, `utils`, `styles`, `config`, `assets`, `types`, `content`, `deps`, `tests`, `3d`
  </section>

  <section title="Guidelines for Manual Commits & AI Prompts">
    1.  **Interactive Editor (Recommended)**: Use `git commit` without `-m` to open an editor for multi-line messages.
    2.  **Command Line (`git commit -m`)**:
        - For single-line messages: `git commit -m "type(scope): subject"`
        - **IMPORTANT**: For multi-line messages, use **multiple `-m` flags**. Each `-m` creates a new paragraph. **NEVER** use literal newlines (`\n`) within a single `-m` argument.
          ```bash
          # CORRECT multi-line format
          git commit -m "feat(auth): add multi-factor auth" -m "Implement TOTP verification flow using speakeasy library." -m "Closes #42"

          # INCORRECT format - DO NOT USE newlines in -m
          git commit -m "feat(auth): add multi-factor auth

Implement TOTP..."
          ```
  </section>

</guidelines>

<implementation>

  <section title="Automated Commits (Cursor AI Workflow)">
    When asked to commit and push changes, the AI MUST follow these steps:
    1.  **Pre-Commit Checks**:
        ```bash
        npm run util:format
        npm run util:lint
        # Fix any format/lint issues before proceeding
        npm run build
        # Ensure build passes without errors/warnings
        ```
    2.  **Stage Changes**:
        ```bash
        git add .
        ```
    3.  **Review Changes**:
        ```bash
        # ALWAYS use --no-pager for Git commands in automation
        git --no-pager status
        git --no-pager diff --staged
        ```
    4.  **Verify SSH Authentication (if using 1Password SSH Agent)**:
        ```bash
        ssh -T git@github.com
        # Expected success: "Hi username! You've successfully authenticated..."
        # Resolve any auth prompts/failures before committing.
        ```
    5.  **Generate Commit Message**:
        - Follow the **General Commit Message Format** strictly.
        - Determine the appropriate `<type>` and `<scope>` based on the staged changes.
        - Generate a concise `<subject>`.
        - **Body**:
          - Add a blank line after the subject.
          - Retrieve file statuses using `git status --porcelain`.
          - Generate a concise bulleted list of significant changes:
            ```
            - Add: path/to/new/file.ts
            - Modify: path/to/changed/file.tsx
            - Delete: path/to/old/file.css
            - Rename: path/to/old.js -> path/to/new.js
            ```
          - Optionally add a brief sentence explaining the "why".
        - **Footer**: Include issue references if applicable.
    6.  **Execute Commit**: Use the multiple `-m` flag method for structured messages:
        ```bash
        # Example commit execution
        git commit -m "type(scope): subject" -m "Bulleted list of changes..." -m "Optional context..." -m "Closes #issue"
        ```
    7.  **Post-Commit Cleanup**: After commit (and push, if requested) is successful:
        ```bash
        npm run util:clean
        ```
  </section>

  <section title="Tooling & Enforcement">
    - **Configuration**: Conventional Commits rules (including types/scopes) may be further defined in `commitlint.config.js`.
    - **Linting**: `commitlint` CLI (`@commitlint/cli`, `@commitlint/config-conventional`) is used to lint commit messages.
    - **Enforcement**: A Husky hook (`.husky/commit-msg`) runs `npx commitlint --edit $1` to validate messages *before* they are committed, preventing non-compliant commits.
  </section>

</implementation>

<examples>
  <positive title="✅ Good Commit Examples">
    ```bash
    # Simple fix
    git commit -m "fix(auth): correct redirect URL after login"

    # Feature with scope and body/footer (using multiple -m)
    git commit -m "feat(components): add UserAvatar component" -m "- Display user initials or image" -m "- Add fallback state" -m "Refs #78"

    # Chore commit (dependency update)
    git commit -m "chore(deps): update react to v19"

    # Refactor with breaking change indicator
    git commit -m "refactor(api)!: change user data structure" -m "BREAKING CHANGE: User endpoint now returns 'fullName' instead of 'firstName' and 'lastName'."
    ```
    ```
    # Interactive editor example (content inside editor)
    feat(r3f): implement dynamic scene loading

    - Add GLTF model loading via drei
    - Implement Suspense for loading state
    - Optimize texture loading

    Closes #101
    ```
  </positive>
  <negative title="❌ Bad Commit Examples">
    ```bash
    # Missing type
    git commit -m "Updated the button style"

    # Subject ends with period, incorrect tense
    git commit -m "fix: Fixed the login bug."

    # Type not from allowed list
    git commit -m "feature(ui): new banner"

    # Using newline characters in -m (INCORRECT)
    git commit -m "fix: address issue

More details here."
    ```
  </negative>
</examples>

<benefits>
- Creates a clear, consistent, and navigable Git history.
- Enables automated semantic versioning and CHANGELOG generation.
- Improves collaboration by making changes easier to understand.
- Provides clear traceability for changes, especially AI-generated ones.
- Integrates seamlessly with CI/CD pipelines and Git tooling.
</benefits>

<scope>
Applies to all Git commits made in this repository by any contributor (human or AI). Enforced via commit message hooks.
</scope>

<references>
- [Conventional Commits Specification](mdc:https:/www.conventionalcommits.org)
- [commitlint Documentation](mdc:https:/commitlint.js.org)
- [Husky Documentation](mdc:https:/typicode.github.io/husky)
- `commitlint.config.js` (Project-specific configuration)
- `.husky/commit-msg` (Git hook script)
</references>

</rule>
