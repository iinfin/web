---
description: Automates Conventional Commits with file change summary and optional context.
globs: []
alwaysApply: true
---
## Description
This rule automates the process of committing changes made by Cursor using the Conventional Commits specification. It includes a concise summary of file statuses (Add, Modify, Delete, Rename) in the commit body and optionally adds a brief overall change summary based on the user's prompt. It triggers after a successful AI edit or generation.

## Rule
After Cursor successfully applies changes (e.g., code generation, edits):
1.  Stage all modified files (`git add .`).
2.  Generate the commit message:
    *   **Subject Line**: Follow the Conventional Commits format: `<type>(<scope>): <description>`.
        *   **Type**: Infer based on the nature of the change (e.g., `feat`, `fix`, `refactor`, `style`, `docs`, `chore`, `perf`, `ci`, `build`, `test`). Default to `chore` if unsure.
        *   **Scope**: Infer from the primary file path modified (e.g., `components-shared`, `hooks-useInputState`, `lib-utils`). Keep it concise.
        *   **Description**: Generate a concise summary of the *overall goal* of the change based on the prompt or edit description. Start with a lowercase verb.
    *   **Body**:
        *   Add a blank line after the subject.
        *   Retrieve the list of changed files and their statuses (Added, Modified, Deleted, Renamed) using `git status --porcelain` or similar.
        *   Generate a concise bulleted list summarizing the key file operations. Examples:
            *   `- Add: src/app/hooks/useInputState.ts`
            *   `- Modify: src/app/components/shared/Cursor.tsx`
            *   `- Delete: src/app/components/shared/OldComponent.tsx`
            *   `- Rename: src/app/lib/utils/oldName.ts -> src/app/lib/utils/newName.ts`
        *   Keep the list focused on significant changes; minor formatting changes across many files might be omitted or grouped for brevity (e.g., `- Style: Format multiple components`). Limit the number of lines if necessary (e.g., max 5-7 bullets).
        *   **(Optional Context)**: If the user prompt provides clear context for the *overall change*, add another blank line and a short sentence summarizing the *why* or linking it to the prompt's goal (e.g., "Integrate cursor component with new input state hook and context."). Avoid detailed per-file descriptions.
3.  Execute `git commit` with the generated subject line and body. Use the `-m` flag multiple times or pass the message via stdin to include the body.
4.  If the commit fails (e.g., pre-commit hooks), report the failure and do not proceed.

## Implementation
- Use an `execute` action triggered by successful AI code modification events.
- The command script should:
    - Intelligently parse change descriptions/prompts and file paths to generate the subject line.
    - Run `git status --porcelain` or equivalent to get file statuses.
    - Format the file statuses into a concise bulleted list for the commit body.
    - Optionally, extract a brief summary from the user prompt/context to add after the file list if helpful.
    - Construct the full commit message (subject + blank line + file list + [optional blank line + context summary]).
    - Execute `git commit` with the full message.

## Benefits
- Consistent and meaningful commit history.
- Automation of a repetitive developer task.
- Improved traceability of AI-driven changes with clear file context and overall goal linkage.

## Examples
Input Prompt: "Refactor the `Cursor.tsx` component to use new input hook `useInputState` and `CursorContext`."
Files Modified:
- M src/app/components/shared/Cursor.tsx
- D src/app/components/shared/CustomCursor.tsx
- A src/app/hooks/useInputState.ts
- A src/app/context/CursorContext.tsx

Expected Commit Message:
```
refactor(components-shared): integrate cursor with input hook and context

- Modify: src/app/components/shared/Cursor.tsx
- Delete: src/app/components/shared/CustomCursor.tsx
- Add: src/app/hooks/useInputState.ts
- Add: src/app/context/CursorContext.tsx

Refactor Cursor component to use centralized state management via useInputState hook and CursorContext.
```

Input Prompt: "Implement the `useWindowSize` hook."
File Created:
- A src/app/hooks/useWindowSize.ts

Expected Commit Message:
```
feat(hooks-useWindowSize): implement useWindowSize hook

- Add: src/app/hooks/useWindowSize.ts
```
(Optional context less necessary here as subject line is descriptive).

Input Prompt: "Format codebase with Prettier"
Files Modified:
- M src/app/components/shared/Cursor.tsx
- M src/app/hooks/useInputState.ts
- M src/app/context/CursorContext.tsx
- M src/app/lib/utils/math.ts
- M src/app/lib/utils/ease.ts
- ... (potentially many more)

Expected Commit Message (Concise Grouping):
```
style: format codebase with prettier

- Style: Format multiple components and utilities.
```
(Optional context likely not needed for simple formatting).
