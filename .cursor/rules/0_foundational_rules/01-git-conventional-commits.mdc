---
description: Enforces and automates Conventional Commits tailored for this project.
globs: []
alwaysApply: true
---
## Description
This rule defines and automates the process of committing changes using the Conventional Commits specification, tailored with project-specific types and scopes defined in `commitlint.config.js`. It ensures consistent, semantic commit messages suitable for automated changelog generation and versioning. It guides both manual commit authoring and the automated commit generation by Cursor, leveraging the `commitlint` setup and the Husky `commit-msg` hook.

## Rule for Automated Commits (Cursor AI)
When asked to commit and push changes:
1. Format and Lint check all files first, fix linter errors and warnings if there are any
    ```bash
    npm run format
    npm run lint
    ```
2.  Run `npm run build` to verify the project builds without error and without any linter warnings before pushing. If there are, fix the errors and then commit and push.
3.  Stage all modified files (`git add .`).
4.   Review the staged changes to understand the full context before committing:
    ```bash
    git --no-pager status
    git --no-pager diff --staged
    ```
    
    4.a **Important:** Always use `--no-pager` for git commands:
        When executing git commands that might produce paginated output, always include the `--no-pager` flag to ensure all output is displayed at once without requiring user interaction:
        For example:
        ```bash
        git --no-pager log
        git --no-pager diff
        git --no-pager show
        ```
        This prevents pagination interfaces that would block Cursor AI's automation workflow.
5.  **Check SSH authentication status** if using 1Password for SSH keys:
    ```bash
    # Test SSH connection to GitHub to verify authentication is working
    ssh -T git@github.com
    ```
    The expected successful response is: `Hi username! You've successfully authenticated, but GitHub does not provide shell access.`

    If authentication fails or 1Password prompts for authorization, complete that process before proceeding with the commit.
6.  Generate the commit message following the format below, using the project's specific types and scopes.
    *   **Subject Line**: `<type>(<scope>): <description>`
        *   **Type**: Choose the most appropriate type from the **Project-Specific Types** list below.
        *   **Scope**: If applicable, choose the most relevant scope from the **Project-Specific Scopes** list below.
        *   **Description**: Generate a concise summary of the *overall goal* starting with a lowercase verb.
    *   **Body**:
        *   Add a blank line after the subject.
        *   Retrieve file statuses using `git status --porcelain` and generate a concise bulleted list:
            *   `- Add: src/app/hooks/useNewHook.ts`
            *   `- Modify: src/app/components/Button.tsx`
            *   `- Delete: src/app/lib/oldUtil.ts`
            *   `- Rename: src/app/styles/old.css -> src/app/styles/new.css`
        *   Keep the list focused on significant changes.
        *   **(Optional Context)**: Add a brief sentence summarizing the "why" or linking to the prompt's goal.
    *   **IMPORTANT**: When using `git commit -m` directly with multiple `-m` flags:
        *   DO NOT include any escape sequences (like `\n`) in the message content.
        *   DO NOT try to format the text with literal newlines within a single `-m` argument.
        *   Each `-m` flag creates a new paragraph in the commit message.
        *   See examples below for the correct way to format multi-line messages.
7.  Execute `git commit` with the generated message.
8.  After the commit (and push, if performed) is completed, run `npm run clean` to clean up build directories.

## Guidelines for Manual Commits & AI Prompts
When committing manually or prompting the AI:

1.  **Commit Message Format**:
    ```
    type(scope): subject

    body

    footer
    ```

    **IMPORTANT**: When using `git commit -m` directly, NEVER include literal newlines or escape sequences (like `\n`) in the message content. Instead:
    - For single-line messages: `git commit -m "type(scope): subject"`
    - For multi-line messages: Use multiple `-m` flags, where each `-m` creates a new paragraph:

    ```bash
    # CORRECT multi-line commit message format
    git commit -m "type(scope): subject" -m "First paragraph of body." -m "Second paragraph of body."

    # INCORRECT - don't do this
    git commit -m "type(scope): subject" -m "Line 1\nLine 2\nLine 3"
    ```

2.  **Project-Specific Types** (Use one):
    *   `feat`: A new feature
    *   `fix`: A bug fix
    *   `docs`: Documentation only changes
    *   `style`: Changes that do not affect the meaning of the code (formatting, etc)
    *   `refactor`: A code change that neither fixes a bug nor adds a feature
    *   `perf`: A code change that improves performance
    *   `test`: Adding missing tests or correcting existing tests
    *   `build`: Changes that affect the build system or external dependencies
    *   `ci`: Changes to CI configuration files and scripts
    *   `chore`: Other changes that don't modify src or test files
    *   `revert`: Reverts a previous commit
    *   **`animation`**: Changes related to animations and motion (Framer Motion)
    *   **`content`**: Content updates like text or images
    *   **`layout`**: Layout and design changes
    *   **`a11y`**: Accessibility improvements
    *   **`r3f`**: Changes specific to React Three Fiber / 3D scenes

3.  **Project-Specific Scopes** (Optional, use one or more relevant scopes):
    *   `components`, `pages`, `api`, `hooks`, `lib`, `utils`, `styles`, `config`, `assets`, `types`, `content`, `deps`, `tests`, `3d`

4.  **Subject**:
    *   Use imperative, present tense (e.g., "add", "fix", "change").
    *   Don't capitalize the first letter.
    *   No period (.) at the end.
    *   Keep the entire header line (`type(scope): subject`) under 100 characters.

5.  **Body** (Optional):
    *   Explain the "why" behind the change.
    *   Use imperative, present tense.
    *   Wrap lines at 72 characters.

6.  **Footer** (Optional):
    *   Reference related issues (e.g., `Closes #123`, `Refs #456`).
    *   Indicate breaking changes with `BREAKING CHANGE: <description>`.

7.  **Breaking Changes**:
    *   Must have a description starting with `BREAKING CHANGE:` in the footer.
    *   Can optionally use `!` after the type/scope (e.g., `refactor(api)!: ...`) to draw attention.

## Implementation Details
*   **Configuration**: Rules are defined in `commitlint.config.js`.
*   **Enforcement**: The Husky hook defined in `.husky/commit-msg` runs `npx commitlint --edit $1` to validate messages before committing.
*   **Packages**: Uses `@commitlint/cli` and `@commitlint/config-conventional`.

## Benefits
- Consistent, semantic commit history.
- Enables automated changelog generation and versioning.
- Improves collaboration and code review efficiency.
- Provides clear traceability for AI-generated changes.

## Examples
✅ **Good Examples:**

**Interactive commit editor (recommended for complex commits):**
```
git commit
```
Then in the editor:
```
feat(components): add responsive hero section with 3D background

- Implement new Hero component structure
- Integrate R3F canvas for background animation
- Use Tailwind CSS for responsive layout

Resolves #42
```

**Command line with multiple -m flags:**
```bash
git commit -m "ci(config): implement github workflows" -m "- Add: GitHub workflows for PR checks" -m "- Add: Release automation configuration" -m "Closes #123"
```

**Simple one-line commit:**
```bash
git commit -m "fix(hooks): prevent infinite loop in useDataFetching hook"
```
```bash
git commit -m "style(layout): adjust main content padding for better alignment"
```
```bash
git commit -m "refactor(r3f): optimize shader code for performance"
```
```bash
git commit -m "chore(deps): update framer-motion to latest version"
```

❌ **Bad Examples:**
```
fixed stuff
update readme
WIP
Component changes
```
```bash
# NEVER do this - using escape sequences in the message
git commit -m "type(scope): subject" -m "Line 1\nLine 2\nLine 3"
```
