---
description: Enforces and automates Conventional Commits tailored for this project.
globs: []
alwaysApply: true
---
## Description
This rule defines and automates the process of committing changes using the Conventional Commits specification, tailored with project-specific types and scopes defined in `commitlint.config.js`. It ensures consistent, semantic commit messages suitable for automated changelog generation and versioning.

It guides both manual commit authoring and the automated commit generation by Cursor, leveraging the `commitlint` setup and the Husky `commit-msg` hook.

## Rule for Automated Commits (Cursor AI)
After Cursor successfully applies changes (e.g., code generation, edits):
1.  Stage all modified files (`git add .`).
2.  **(Recommended)** Review the staged changes to understand the full context before committing:
    ```bash
    git diff --staged
    ```
3.  Generate the commit message following the format below, using the project's specific types and scopes.
    *   **Subject Line**: `<type>(<scope>): <description>`
        *   **Type**: Choose the most appropriate type from the **Project-Specific Types** list below.
        *   **Scope**: If applicable, choose the most relevant scope from the **Project-Specific Scopes** list below.
        *   **Description**: Generate a concise summary of the *overall goal* starting with a lowercase verb.
    *   **Body**:
        *   Add a blank line after the subject.
        *   Retrieve file statuses using `git status --porcelain` and generate a concise bulleted list:
            *   `- Add: src/app/hooks/useNewHook.ts`
            *   `- Modify: src/app/components/Button.tsx`
            *   `- Delete: src/app/lib/oldUtil.ts`
            *   `- Rename: src/app/styles/old.css -> src/app/styles/new.css`
        *   Keep the list focused on significant changes.
        *   **(Optional Context)**: Add a brief sentence summarizing the "why" or linking to the prompt's goal.
4.  Execute `git commit` with the generated message.

## Guidelines for Manual Commits & AI Prompts
When committing manually or prompting the AI:

1.  **Commit Message Format**:
    ```
    type(scope): subject

    body

    footer
    ```

2.  **Project-Specific Types** (Use one):
    *   `feat`: A new feature
    *   `fix`: A bug fix
    *   `docs`: Documentation only changes
    *   `style`: Changes that do not affect the meaning of the code (formatting, etc)
    *   `refactor`: A code change that neither fixes a bug nor adds a feature
    *   `perf`: A code change that improves performance
    *   `test`: Adding missing tests or correcting existing tests
    *   `build`: Changes that affect the build system or external dependencies
    *   `ci`: Changes to CI configuration files and scripts
    *   `chore`: Other changes that don't modify src or test files
    *   `revert`: Reverts a previous commit
    *   **`animation`**: Changes related to animations and motion (Framer Motion)
    *   **`content`**: Content updates like text or images
    *   **`layout`**: Layout and design changes
    *   **`a11y`**: Accessibility improvements
    *   **`r3f`**: Changes specific to React Three Fiber / 3D scenes

3.  **Project-Specific Scopes** (Optional, use one or more relevant scopes):
    *   `components`, `pages`, `api`, `hooks`, `lib`, `utils`, `styles`, `config`, `assets`, `types`, `content`, `deps`, `tests`, `3d`

4.  **Subject**:
    *   Use imperative, present tense (e.g., "add", "fix", "change").
    *   Don't capitalize the first letter.
    *   No period (.) at the end.
    *   Keep the entire header line (`type(scope): subject`) under 100 characters.

5.  **Body** (Optional):
    *   Explain the "why" behind the change.
    *   Use imperative, present tense.
    *   Wrap lines at 72 characters.

6.  **Footer** (Optional):
    *   Reference related issues (e.g., `Closes #123`, `Refs #456`).
    *   Indicate breaking changes with `BREAKING CHANGE: <description>`.

7.  **Breaking Changes**:
    *   Must have a description starting with `BREAKING CHANGE:` in the footer.
    *   Can optionally use `!` after the type/scope (e.g., `refactor(api)!: ...`) to draw attention.

## Implementation Details
*   **Configuration**: Rules are defined in `commitlint.config.js`.
*   **Enforcement**: The Husky hook defined in `.husky/commit-msg` runs `npx commitlint --edit $1` to validate messages before committing.
*   **Packages**: Uses `@commitlint/cli` and `@commitlint/config-conventional`.

## Benefits
- Consistent, semantic commit history.
- Enables automated changelog generation and versioning.
- Improves collaboration and code review efficiency.
- Provides clear traceability for AI-generated changes.

## Examples
✅ **Good Examples:**
```
feat(components): add responsive hero section with 3D background

- Implement new Hero component structure
- Integrate R3F canvas for background animation
- Use Tailwind CSS for responsive layout

Resolves #42
```
```
fix(hooks): prevent infinite loop in useDataFetching hook
```
```
style(layout): adjust main content padding for better alignment
```
```
refactor(r3f): optimize shader code for performance
```
```
chore(deps): update framer-motion to latest version
```

❌ **Bad Examples:**
```
fixed stuff
update readme
WIP
Component changes
```
