---
description: PR Review Automation Rule for dev to main
globs: []
alwaysApply: true
---
<rule>

<id>0_foundational_rules/02-pr-review-automation</id>
<title>Pull Request Review Automation (dev -> main)</title>

<description>
Automates the generation of a comprehensive Pull Request review when merging changes from the `dev` branch to the `main` branch. The AI analyzes branch differences, considers CI/CD context, and produces a structured PR title and description compliant with Conventional Commits and project release workflows.
</description>

<context>
Automating the PR review process from `dev` to `main` ensures consistency, saves developer time, and provides reviewers with crucial context regarding changes, potential impacts (versioning, breaking changes), and the post-merge release process. This is particularly important before merging changes that trigger automated releases.
</context>

<guidelines>
When requested to review changes for a PR from `dev` to `main` (e.g., using queries like "review current changes for PR from dev to main" or "prepare PR dev to main"), the AI MUST perform the following:

1.  **Analyze Differences**: Compare the `dev` branch against the `main` branch to identify all changes (commits, files).
2.  **Contextual Analysis**: Evaluate the identified changes considering:
    *   Conventional Commits rules (<id>0_foundational_rules/01-git-conventional-commits</id>).
    *   Release workflow configuration (`.github/workflows/release.yml`).
    *   Semantic release configuration (`.releaserc.json`).
    *   Impact on other CI/CD workflows (in `.github/workflows/`).
    *   Dependency changes (`package.json`).
    *   Potential breaking changes (`BREAKING CHANGE:` footers or `!` in commit headers).
    *   Migration requirements or special deployment considerations.
3.  **Generate Output**: Produce the following, formatted clearly in Markdown code blocks:
    *   **PR Title**: Strictly follow Conventional Commits format: `<type>(<scope>): <description>`.
    *   **PR Description**: A comprehensive summary including:
        *   Overall purpose of the changes.
        *   Categorized list of changes.
        *   Version impact analysis.
        *   Potential merge issues/CI status.
        *   Related issue references.
        *   Explanation of the post-merge process.
4.  **Categorize Changes** (in PR Description):
    *   Group commits/changes logically (e.g., Features, Bug Fixes, CI/CD, Docs, Refactoring, Perf, Style, Tests, Dependencies, Breaking Changes).
5.  **Version Impact Analysis** (in PR Description):
    *   Predict the semantic version bump (MAJOR, MINOR, PATCH) based on Conventional Commit types present.
    *   Explain the reasoning (e.g., "Contains `feat` commits", "Includes `BREAKING CHANGE:`").
    *   List the commit types influencing the decision.
6.  **Address Merge Issues** (in PR Description):
    *   Highlight potential merge conflicts (if detectable).
    *   Mention the status of CI checks (if available/applicable).
    *   Note any significant changes in test coverage (if detectable).
7.  **Reference Issues** (in PR Description):
    *   Extract and list all issue references (`Closes #X`, `Refs #Y`) found in the commit messages between `main` and `dev`.
8.  **Explain Post-Merge Process** (in PR Description):
    *   Clearly state what happens automatically after merging to `main`:
        *   How `semantic-release` processes commits.
        *   The type and pattern of the release version created.
        *   How `CHANGELOG.md` will be updated (include a preview).
        *   Creation of a GitHub Release.
        *   The merge-back process from `main` to `dev` (if applicable).

</guidelines>

<implementation>

  <section title="AI Execution Steps">
    Upon receiving a relevant user request, the AI MUST execute the following process:

    1.  **Fetch & Compare Branches**:
        ```bash
        # Ensure local branches are up-to-date
        git fetch origin main:main dev:dev

        # List differing files
        git diff --name-status origin/main...origin/dev --no-pager

        # Get commit history differences (log of commits in dev but not main)
        git log origin/main..origin/dev --oneline --no-pager

        # Get detailed commit messages (for analysis)
        git log origin/main..origin/dev --pretty=format:"%h %s%n%b" --no-merges --no-pager

        # Get commit types for version prediction
        # Note: This grep focuses on standard types. Adapt if custom types are primary drivers.
        git log origin/main..origin/dev --pretty=format:"%H %s" --no-pager | grep -E "^[a-f0-9]+ [a-z]+(\(.+\))?!?: "
        ```
    2.  **Detect Breaking Changes**:
        ```bash
        # Check commit bodies/footers for BREAKING CHANGE
        git log origin/main..origin/dev --pretty=format:"%B" --no-pager | grep -E -i "BREAKING CHANGE:"

        # Check commit subjects for !
        git log origin/main..origin/dev --pretty=format:"%s" --no-pager | grep -E "^[a-z]+(\(.+\))?!: "
        ```
    3.  **Analyze Dependencies**:
        ```bash
        # Check for changes in package.json or lock files
        git diff origin/main...origin/dev -- package.json package-lock.json pnpm-lock.yaml yarn.lock --no-pager
        ```
    4.  **Review Key Configuration Files**:
        ```bash
        # Read relevant rule and config files for context
        cat .cursor/rules/0_foundational_rules/01-git-conventional-commits.mdc
        cat .github/workflows/release.yml
        cat .releaserc.json
        # Optionally check PR template
        cat .github/PULL_REQUEST_TEMPLATE.md 2>/dev/null
        # List other workflows
        ls -la .github/workflows/
        ```
    5.  **Analyze Specific File Changes** (If needed for deeper context):
        ```bash
        # Show diff for a specific critical file
        git diff origin/main...origin/dev -- <path/to/file> --no-pager

        # Show content of file on each branch
        git show origin/dev:<path/to/file> | cat
        git show origin/main:<path/to/file> | cat
        ```
    6.  **Synthesize & Generate Output**: Based on the analysis from steps 1-5, construct the PR Title and Description according to the format specified in the `<guidelines>` and `<examples>` sections.

  </section>

</implementation>

<examples>
<positive title="✅ Correct User Query">
```text
Review current changes for PR from dev to main
```
</positive>

<positive title="✅ Correct AI Response Format">
```markdown
## PR Title

```text
feat(auth): implement multi-factor authentication
```

## PR Description

This PR introduces multi-factor authentication (MFA) using TOTP to enhance account security.

### Changes

*   **Features**
    *   Added TOTP setup and verification flow.
    *   Integrated `speakeasy` library for code generation/verification.
    *   Updated user profile settings page with MFA options.
*   **Dependencies**
    *   Added `speakeasy` and `@types/speakeasy`.
*   **Tests**
    *   Added unit tests for TOTP logic.
    *   Added integration tests for the settings page flow.

### Version Impact

This PR will trigger a **MINOR** release.

*Reasoning*: Contains `feat` commits, indicating new functionality added in a backwards-compatible manner.
*Influencing Commits*: `feat(auth)`, `feat(settings)`

### Breaking Changes

None

### Related Issues

*   Closes #42
*   Refs #55

### Merge/CI Status

*   *Potential Conflicts*: None detected.
*   *CI Checks*: [Pending/Passing/Failing - *AI should state status if known*]

### Documentation Status

*   [x] New features are documented (added MFA section to user guide).
*   [ ] API changes are documented (N/A).
*   [ ] Breaking changes include migration guides (N/A).

### Post-Merge Process

Once merged to `main`:
1.  The `semantic-release` workflow will trigger.
2.  It will analyze commits since the last release and determine the next version (e.g., `0.3.0` if current is `0.2.x`).
3.  The `CHANGELOG.md` will be updated with entries like:
    ```markdown
    ### Features
    *   **auth:** implement multi-factor authentication (closes #42) (#pr-number)
    *   **settings:** add MFA options to profile page (#pr-number)
    ```
4.  A GitHub Release tagged with the new version (e.g., `v0.3.0`) will be created with the changelog notes.
5.  Changes from `main` will be automatically merged back into `dev` by the `merge-back` workflow.

```
</positive>

<negative title="❌ Incorrect AI Response">
```text
The changes look good. Diff shows updates to auth files. Ready to merge.
```
</negative>
</examples>

<benefits>
-   Ensures PRs merging to `main` have consistent, informative titles and descriptions.
-   Automates the analysis of changes, saving significant developer time.
-   Improves the quality and usefulness of PR documentation for reviewers.
-   Provides explicit version impact prediction based on semantic release rules.
-   Clearly communicates the automated release process triggered by the merge.
-   Helps identify breaking changes and dependency updates early.
-   Links commits to issues for better traceability.
</benefits>

<scope>
This rule specifically applies to the process of generating Pull Request reviews and documentation for merges from the `dev` branch into the `main` branch, particularly when automated release processes are tied to `main`.
</scope>

<references>
-   `<id>0_foundational_rules/01-git-conventional-commits</id>`
-   `.github/workflows/release.yml` (Project's Release Workflow)
-   `.releaserc.json` (Semantic Release Configuration)
-   [Semantic Release Documentation](https://semantic-release.gitbook.io/)
-   GitHub PR Templates (if `.github/PULL_REQUEST_TEMPLATE.md` exists)
</references>

</rule>
