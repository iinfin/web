---
description: React Three Fiber (R3F) and Three.js Best Practices
globs: []
alwaysApply: true
---
<rule>

<id>1_technical_stack_rules/15-r3f-threejs</id>
<title>React Three Fiber (R3F) & Three.js Integration</title>

<description>
Enforces best practices for integrating and managing Three.js scenes within the React application using React Three Fiber (R3F), focusing on performance, structure, and maintainability.
</description>

<context>
React Three Fiber provides a declarative React renderer for Three.js, allowing developers to build complex 3D scenes using familiar React concepts. Adhering to best practices ensures optimal performance and leverages the strengths of both libraries.
</context>

<guidelines>
1.  **Client Component Requirement**: All components directly using R3F hooks (`useFrame`, `useThree`, etc.) or rendering the `<Canvas>` component MUST be marked with the `'use client'` directive, as R3F relies on browser APIs and client-side rendering.
2.  **Canvas Setup (`<Canvas>`)**:
    *   Use the `<Canvas>` component from `@react-three/fiber` as the root entry point for the 3D scene.
    *   Configure essential scene settings via props on `<Canvas>`: `camera` (position, fov), `shadows` (enable/configure shadow map type), performance hints (`dpr`, `frameloop`).
    *   Example: `<Canvas shadows camera={{ position: [0, 5, 10], fov: 50 }} frameloop="demand">`
3.  **Declarative Scene Structure**:
    *   Represent Three.js objects (meshes, lights, groups, cameras) using R3F's declarative JSX syntax (e.g., `<mesh>`, `<group>`, `<ambientLight>`, `<perspectiveCamera>`).
    *   Pass props directly to configure object properties (e.g., `<mesh position={[1, 0, 0]} scale={1.5} rotation={[0, Math.PI / 4, 0]}>`). Use array literals for vectors/rotations.
    *   Nest components to create scene hierarchies (e.g., `<group><mesh /></group>`).
    *   Keep components focused and reusable (see <id>2_quality_and_architecture_rules/21-component-design</id>).
4.  **R3F Hooks**:
    *   `useFrame((state, delta) => { ... })`: Use for animations and updates within the render loop. Keep logic inside `useFrame` efficient; avoid complex computations or state updates that trigger frequent React re-renders.
    *   `useThree()`: Use to access the core R3F state (gl renderer, scene, camera, mouse coordinates, viewport size, etc.) when needed.
    *   `@react-three/drei` Hooks: Leverage Drei helpers extensively for common tasks: `useTexture`, `useGLTF`, `useFBX`, `useAnimations`, `useEnvironment`, `useProgress`, etc.
5.  **State Management**:
    *   Use standard React state hooks (`useState`, `useReducer`) or project state management solutions (e.g., Zustand) for managing state that affects the React component tree or UI outside the canvas.
    *   For state purely internal to the Three.js scene and managed within the render loop, `useRef` attached to Three.js objects is often appropriate.
6.  **Performance Optimization**:
    *   **Draw Calls**: Use `InstancedMesh` from Three.js (or Drei's `<Instances>` helper) for rendering large numbers of identical objects efficiently.
    *   **Geometry & Materials**: Share geometry and material instances whenever possible. Avoid creating new geometries/materials inside loops or `useFrame`.
    *   **Resource Disposal**: Manually dispose of unused Three.js resources (geometries, materials, textures) when components unmount to prevent memory leaks. Use `useEffect` or `useLayoutEffect` cleanup functions.
        ```typescript
        useLayoutEffect(() => {
          // Assume meshRef.current holds a THREE.Mesh
          const mesh = meshRef.current;
          return () => {
            mesh?.geometry?.dispose();
            if (Array.isArray(mesh?.material)) {
              mesh.material.forEach(mat => mat.dispose());
            } else {
              mesh?.material?.dispose();
            }
            // Dispose textures if manually created and not managed elsewhere
          };
        }, []);
        ```
    *   **`useFrame` Efficiency**: Minimize calculations within `useFrame`. Memoize expensive calculations if necessary.
    *   **Conditional Rendering / `frameloop`**: Use React conditional rendering to add/remove parts of the scene. Set `frameloop="demand"` on `<Canvas>` if the scene only needs to re-render based on user input or specific state changes, and manually invalidate using `invalidate()` from `useThree`. Set `frameloop="never"` if rendering is entirely controlled externally.
7.  **Asset Loading (`@react-three/drei`)**:
    *   Use hooks like `useTexture`, `useGLTF`, `useFBX` for loading assets.
    *   Wrap components that load assets (or the entire scene) within `<Suspense>` to handle loading states gracefully. Provide a meaningful `fallback` prop to `<Suspense>`.
    *   Use Drei's `<Preload all />` component inside `<Suspense>` to preload assets associated with `useGLTF`, `useTexture`, etc.
8.  **Interactivity**: Utilize R3F's built-in event system (`onClick`, `onPointerOver`, `onPointerOut`, `onPointerMove`, `onWheel`, etc.) directly on mesh components for interaction.
9.  **Typing**:
    *   Use TypeScript effectively. Leverage types from `@react-three/fiber`, `@react-three/drei`, and `@types/three`.
    *   Define clear types for custom component props and internal state.
    *   Use non-null assertions (`!`) on refs (`meshRef.current!`) cautiously, only when certain the ref is populated.
</guidelines>

<implementation>
-   **Libraries**: `@react-three/fiber`, `@react-three/drei`, `three`.
-   **Linting**: Standard React/TypeScript linting applies.
-   **Code Review**: Check for `'use client'` directive, proper hook usage, performance patterns (instancing, disposal), asset loading with Suspense, and efficient `useFrame` logic.
-   **AI Actions**:
    *   **Reject**: R3F components/hooks used without the `'use client'` directive.
    *   **Suggest**: Using Drei hooks (`useTexture`, `useGLTF`, etc.) wrapped in `<Suspense>` for asset loading.
    *   **Suggest**: Using `InstancedMesh` or `<Instances>` for rendering numerous similar objects.
    *   **Reject**: Heavy computations or unnecessary state updates within `useFrame`.
    *   **Suggest**: Adding cleanup functions (`useEffect`/`useLayoutEffect`) to dispose of Three.js resources.
    *   **Warn**: If `<Suspense>` fallback is missing or overly simplistic for asset loading.
    *   **Info**: Remind about `frameloop="demand"` for scenes that don't require constant updates.
</implementation>

<examples>
<positive title="✅ Correct: Basic R3F Scene with Interaction">
```typescript
'use client'; // Required for R3F
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, Box } from '@react-three/drei';
import { useRef, useState, useLayoutEffect } from 'react';
import * as THREE from 'three';

function InteractiveBox() {
  const meshRef = useRef<THREE.Mesh>(null); // Use null initially
  const [hovered, setHover] = useState(false);
  const [active, setActive] = useState(false);

  // Basic rotation animation
  useFrame((state, delta) => {
    if (meshRef.current) {
      meshRef.current.rotation.y += delta * 0.5;
    }
  });

  // Example of resource disposal (though Box manages its own geometry/material)
  useLayoutEffect(() => {
      const mesh = meshRef.current;
      // Example: If we manually created geometry/material, dispose here
      return () => {
          // mesh?.geometry?.dispose();
          // mesh?.material?.dispose();
      }
  }, []);

  return (
    <Box // Using Drei's Box simplifies geometry/material creation
      ref={meshRef}
      args={[1, 1, 1]} // Box dimensions
      scale={active ? 1.5 : 1}
      onClick={() => setActive(!active)}
      onPointerOver={(event) => { event.stopPropagation(); setHover(true); }}
      onPointerOut={() => setHover(false)}
    >
      <meshStandardMaterial color={hovered ? '#ff69b4' : '#ff8c00'} />
    </Box>
  );
}

export default function MyScene() {
  return (
    <div className="h-screen w-full">
      <Canvas shadows camera={{ position: [0, 2, 5], fov: 60 }}>
        <ambientLight intensity={Math.PI / 2} />
        <spotLight position={[10, 10, 10]} angle={0.15} penumbra={1} decay={0} intensity={Math.PI} castShadow />
        <pointLight position={[-10, -10, -10]} decay={0} intensity={Math.PI} />

        <InteractiveBox />

        <OrbitControls />
        {/* Add a ground plane to receive shadows */}
        <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[0, -1, 0]}>
            <planeGeometry args={[10, 10]} />
            <shadowMaterial transparent opacity={0.5} />
        </mesh>
      </Canvas>
    </div>
  );
}
```
</positive>

<positive title="✅ Correct: GLTF Model Loading with Suspense & Preload">
```typescript
'use client';
import { Canvas } from '@react-three/fiber';
import { OrbitControls, useGLTF, Preload, Environment } from '@react-three/drei';
import { Suspense } from 'react';

function Model({ url }: { url: string }) {
  // useGLTF handles disposal automatically via react-three-fiber lifecycle
  const { scene } = useGLTF(url);
  return <primitive object={scene} scale={0.8} />;
}

// Loading fallback component
function Loader() {
  // Could use Drei's <Html> and <useProgress> for a percentage loader
  return <mesh><boxGeometry /><meshBasicMaterial color="gray" wireframe /></mesh>;
}

export default function SceneWithModel() {
  return (
    <Canvas shadows camera={{ position: [3, 3, 3], fov: 50 }}>
      <Suspense fallback={<Loader />}> {/* Meaningful fallback */}
        <Environment preset="city" /> {/* Add environment lighting */}
        <Model url="/models/robot.glb" />
        <Preload all /> {/* Preload assets used by useGLTF/useTexture etc. */}
      </Suspense>
      <OrbitControls autoRotate />
    </Canvas>
  );
}
```
</positive>

<negative title="❌ Incorrect: Missing 'use client'">
```typescript
// Bad: Missing 'use client' directive
import { Canvas } from '@react-three/fiber';

export default function BadScene() {
  // This component will fail because R3F requires client-side rendering
  return <Canvas>{/* ... */}</Canvas>;
}
```
</negative>

<negative title="❌ Incorrect: Manual Three.js Calls Outside R3F">
```typescript
// Bad: Mixing imperative Three.js code outside the R3F declarative structure
'use client';
import { useEffect } from 'react';
import * as THREE from 'three';

function ManualManipulation() {
  useEffect(() => {
    // Avoid creating scenes/renderers manually like this when using R3F
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer();
    // ... manual setup and rendering ...
    // This bypasses R3F's optimizations and React integration.
  }, []);

  return <div id="manual-three-container"></div>; // Not using <Canvas>
}
```
</negative>
</examples>

<benefits>
-   Allows building complex 3D scenes using React's component model.
-   Simplifies Three.js setup and boilerplate.
-   Integrates 3D scenes seamlessly with the rest of the React UI.
-   Provides performance optimizations and a managed render loop.
-   Rich ecosystem via `@react-three/drei` for common tasks and helpers.
</benefits>

<scope>
Applies to all components and code interacting with Three.js via React Three Fiber (`@react-three/fiber`) and its ecosystem (`@react-three/drei`).
</scope>

<references>
-   [React Three Fiber Documentation](mdc:https:/docs.pmnd.rs/react-three-fiber)
-   [React Three Drei Documentation](mdc:https:/github.com/pmndrs/drei)
-   [Three.js Documentation](mdc:https:/threejs.org/docs)
-   <id>2_quality_and_architecture_rules/21-component-design</id>
</references>

</rule>
