---
description: Next.js 15 App Router Conventions Rule
globs: []
alwaysApply: true
---
<rule>

<id>1_technical_stack_rules/12-nextjs-app-router</id>
<title>Next.js App Router Conventions</title>

<description>
Enforces conventions and best practices specific to the Next.js 14+ App Router architecture, promoting optimal structure, data fetching, and feature usage.
</description>

<context>
Adhering to App Router conventions ensures efficient code splitting, server-side rendering, data caching, and utilization of React Server Components, leading to better performance and maintainability.
</context>

<guidelines>
1.  **File-based Routing Conventions**:
    *   Use `page.tsx` to define the unique UI for a route segment.
    *   Use `layout.tsx` to define shared UI that wraps child segments. The root layout (`src/app/layout.tsx`) is mandatory and defines the `<html>` and `<body>` tags.
    *   Use `loading.tsx` to create loading UI shown during navigation using React Suspense boundaries.
    *   Use `error.tsx` to create UI boundaries for catching errors within a segment (must be a Client Component).
    *   Use `not-found.tsx` to define UI for handling `notFound()` calls or unmatched routes within a segment.
    *   Use `template.tsx` for re-rendering layouts on navigation (use sparingly, `layout.tsx` is usually preferred).
    *   Use `route.ts` (or `route.js`) to define API endpoints (Route Handlers) within the App Router structure.
    *   Organize routes using folders. Use Route Groups `(folderName)` to organize segments without affecting the URL path.
    *   Use Parallel Routes (`@folderName`) to render multiple independent pages within the same layout.
2.  **Server Components (Default)**:
    *   Components within the `app` directory are Server Components (RSCs) by default. Leverage this for direct data fetching, accessing server-only resources (databases, secrets), and minimizing client-side JavaScript.
3.  **Client Components (`'use client'`)**:
    *   Mark components that require browser APIs, state (`useState`, `useReducer`), lifecycle effects (`useEffect`), or event listeners with the `'use client'` directive at the top of the file.
    *   Keep Client Components as small and focused as possible ("leaf" components). Import Server Components into Client Components where necessary.
4.  **Data Fetching**:
    *   **Server Components**: Prefer using `fetch` with extended caching options (`cache: 'force-cache'` (default), `cache: 'no-store'`, `next: { revalidate: number }`) or React's `cache` function for data fetching.
    *   **Client Components**: Fetch data via Route Handlers (`route.ts`) or use libraries like SWR/React Query if client-side fetching is necessary.
    *   **Mutations**: Utilize Server Actions for handling form submissions and data mutations securely on the server.
5.  **Metadata API**:
    *   Use the static `metadata` object or the dynamic `generateMetadata` function in `layout.tsx` or `page.tsx` files to manage `<head>` elements (e.g., `title`, `description`, Open Graph tags).
    *   Avoid manually adding `<head>`, `<title>`, or `<meta>` tags directly in layouts or pages.
6.  **Routing & Navigation**:
    *   Use the `next/link` component for client-side navigation between routes. Link automatically prefetches eligible routes.
    *   Use the `useRouter` hook from `next/navigation` for programmatic navigation within Client Components.
    *   Use the `redirect` function from `next/navigation` in Server Components or Route Handlers for server-side redirects.
7.  **Middleware (`src/middleware.ts`)**:
    *   Use middleware to run code *before* a request completes (e.g., authentication checks, redirects based on geolocation/locale, setting request headers).
    *   Keep middleware logic minimal and fast to avoid impacting request latency. Use the Edge Runtime where possible.
8.  **Configuration (`next.config.mjs`)**:
    *   Use `next.config.mjs` (ESM) for configuring Next.js options (e.g., redirects, headers, image optimization settings).
</guidelines>

<implementation>
-   **Code Structure**: Enforced by Next.js file conventions.
-   **Linting**: ESLint plugins may help catch some issues (e.g., incorrect hook usage).
-   **Code Review**: Verify correct usage of RSC/Client Component boundaries, data fetching patterns, Metadata API, and routing hooks.
-   **AI Actions**:
    *   **Reject**: Manual `<head>`, `<title>`, `<meta>` tags in components; suggest using the Metadata API.
    *   **Suggest**: Shifting client-side data fetching (`useEffect` fetch) to Server Components or Server Actions where appropriate.
    *   **Reject**: Defining API logic directly within `page.tsx` or Client Components; suggest using Route Handlers (`route.ts`) or Server Actions.
    *   **Suggest**: Adding `loading.tsx` and `error.tsx` files for improved UX during navigation and error states.
    *   **Reject**: Usage of the `next/router` hook (Pages Router); insist on `next/navigation` hooks (`useRouter`, `usePathname`, `useSearchParams`) for the App Router.
    *   **Suggest**: Keeping Client Components (`'use client'`) focused and small.
</implementation>

<examples>
<positive title="✅ Correct: page.tsx with RSC Data Fetching & Metadata">
```typescript
// src/app/blog/[slug]/page.tsx
import { type Metadata } from 'next';
import { getPostBySlug } from '@/lib/api';
import { notFound } from 'next/navigation';

// Dynamic Metadata Generation
export async function generateMetadata({ params }: { params: { slug: string } }): Promise<Metadata> {
  const post = await getPostBySlug(params.slug);
  if (!post) {
    return { title: 'Post Not Found' };
  }
  return {
    title: post.title,
    description: post.excerpt,
  };
}

// Server Component Page
async function BlogPostPage({ params }: { params: { slug: string } }) {
  const post = await getPostBySlug(params.slug); // Data fetching in RSC

  if (!post) {
    notFound(); // Use notFound helper
  }

  return (
    <article>
      <h1>{post.title}</h1>
      <div dangerouslySetInnerHTML={{ __html: post.content }} />
    </article>
  );
}
export default BlogPostPage;
```
</positive>

<positive title="✅ Correct: Route Handler (API Endpoint)">
```typescript
// src/app/api/health/route.ts
import { NextResponse } from 'next/server';

export async function GET() {
  // Simple health check endpoint
  return NextResponse.json({ status: 'ok', timestamp: Date.now() });
}
```
</positive>

<negative title="❌ Incorrect: Manual Head Tags & Client Fetching">
```typescript
// src/app/bad-example/page.tsx
'use client'; // Often unnecessary if only fetching data
import { useEffect, useState } from 'react';

function BadExamplePage() {
  const [data, setData] = useState(null);

  // Bad: Client-side data fetching when RSC is usually better
  useEffect(() => {
    fetch('/api/some-data').then(res => res.json()).then(setData);
  }, []);

  return (
    <>
      {/* Bad: Manual head management instead of Metadata API */}
      <head>
        <title>Bad Example</title>
      </head>
      <main>
        {data ? <pre>{JSON.stringify(data)}</pre> : 'Loading...'}
      </main>
    </>
  );
}
export default BadExamplePage;
```
</negative>
</examples>

<benefits>
-   Ensures proper utilization of Next.js App Router features.
-   Promotes better performance through RSCs, optimized data fetching, and caching.
-   Improves SEO and social sharing via the Metadata API.
-   Creates a more organized and maintainable project structure.
-   Simplifies routing and API endpoint creation.
</benefits>

<scope>
Applies to all code within the `src/app` directory and related configuration files (`next.config.mjs`, `src/middleware.ts`).
</scope>

<references>
-   [Next.js App Router Documentation](https://nextjs.org/docs/app)
-   [Next.js File Conventions](https://nextjs.org/docs/app/building-your-application/routing/file-conventions)
-   [Next.js Data Fetching](https://nextjs.org/docs/app/building-your-application/data-fetching)
-   [Next.js Metadata API](https://nextjs.org/docs/app/building-your-application/optimizing/metadata)
-   [Next.js Server Actions](https://nextjs.org/docs/app/building-your-application/data-fetching/server-actions)
-   <id>1_technical_stack_rules/11-react-patterns</id>
</references>

</rule>
