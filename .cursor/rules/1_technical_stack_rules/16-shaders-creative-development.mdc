---
description:
globs: []
alwaysApply: true
---
<rule>

<id>1_technical_stack_rules/16-shaders-creative-development</id>
<title>Shader Development & Creative Coding Principles</title>

<description>
Guides the development of custom GLSL shaders within the Three.js/R3F environment, emphasizing creative visual output, mathematical elegance, and GPU performance optimization, inspired by principles common in the creative coding community (e.g., Inigo Quilez).
</description>

<context>
Custom shaders unlock unique visual possibilities beyond standard materials. Applying creative coding principles ensures shaders are not only visually innovative but also performant and maintainable, leveraging mathematical techniques for procedural generation and optimization.
</context>

<guidelines>
1.  **Core Philosophy**:
    *   **Mathematical Thinking**: Prioritize vector mathematics, analytical solutions (where possible), and concise formulas over brute-force or overly complex computational approaches. Favor algebraic solutions (dot products, cross products, reflections) over trigonometry where equivalent and cheaper.
    *   **Performance Awareness**: Optimize aggressively for the GPU. Minimize instruction counts, reduce texture fetches (ALU often cheaper), manage precision (`mediump` vs. `highp`), avoid expensive built-ins (`pow`, `exp`, `log`, `sin`, `cos`, `tan`, inverse trig) in tight loops, and understand branching costs (conditional moves vs. divergent branches).
    *   **Procedural Generation**: Leverage procedural techniques (noise functions like Simplex/Value/Voronoi, Signed Distance Functions (SDFs), fractals, domain warping) to generate complex visuals from simple mathematical descriptions, minimizing texture dependencies and memory usage.
    *   **Visual Craftsmanship**: Strive for unique, high-quality aesthetics. Focus on details like smooth motion (good easing, continuous functions), analytical anti-aliasing, thoughtful color palettes (parametric generation), and artistic intent beyond basic PBR.
2.  **SDF & Raymarching (If Applicable)**:
    *   Master SDF primitives and operators (union, difference, intersection, smooth minimum `smin`) for complex geometry representation.
    *   Implement efficient raymarching algorithms (e.g., sphere tracing) with techniques like adaptive step sizes, early hit termination, and bounding volume checks.
    *   Calculate normals analytically using SDF gradients (`∇f`) rather than numerical finite differences when feasible for better accuracy and performance.
    *   Explore SDF applications for effects like soft shadows, ambient occlusion, and approximate subsurface scattering.
3.  **Procedural Patterns & Noise**:
    *   Implement or utilize efficient noise functions (Value, Gradient/Perlin, Simplex, Voronoi/Cellular). Understand their visual characteristics and computational costs.
    *   Combine noise at multiple frequencies/amplitudes (Fractal Brownian Motion - fBM, turbulence) for creating naturalistic detail.
    *   Use domain manipulation techniques (warping/distortion, repetition `mod`, mirroring `abs`) to create intricate patterns from basic functions.
    *   Apply analytical derivatives (`dFdx`, `dFdy`, `fwidth`) for proper anti-aliasing of procedural patterns and sharp geometric edges.
4.  **Performance Optimization Techniques**:
    *   **Instruction Count**: Keep shader code concise. Pre-calculate uniforms or constants on the CPU where possible.
    *   **Precision**: Default to `mediump` for colors, UVs, and intermediate calculations unless `highp` is explicitly required for precision (e.g., world positions, complex accumulations, ray directions).
    *   **Expensive Operations**: Minimize or refactor usage of `pow`, `exp`, `log`, `sin`, `cos`, `tan`. Avoid inverse trigonometric functions (`asin`, `acos`, `atan`, `atan2`) – often replaceable with vector math.
    *   **Branching**: Prefer branchless logic using `step`, `smoothstep`, `mix`, ternary operator (`?:`), or mathematical equivalents where performance is critical (especially in fragment shaders). Understand GPU warp/wavefront execution and the cost of divergence.
    *   **Data Packing**: Utilize vector components efficiently (e.g., store related values in `vec2`, `vec3`, `vec4`).
5.  **Shader Code Structure & Style**:
    *   Organize code into well-named helper functions for readability and reuse.
    *   Use consistent naming conventions (e.g., `p` for sample point, `uv` for texture coords, `ro`/`rd` for ray origin/direction, `t` for time, `n` or `nor` for normal).
    *   Document non-obvious algorithms, mathematical tricks, or optimization choices with concise comments. Reference external resources (papers, articles) if applicable.
    *   Use GLSL `const` for compile-time constants. Define descriptive names for constants instead of using magic numbers directly in formulas.
6.  **Visual Quality & Polish**:
    *   Implement analytical anti-aliasing (using `fwidth` or derivatives) for procedural patterns, SDF edges, and geometric lines.
    *   Design color palettes programmatically (e.g., using `cos`, `mix`, gradients) for flexibility and aesthetic control.
    *   Ensure smooth, continuous motion using well-chosen easing functions or mathematical formulations (avoiding discontinuities).
    *   Consider implementing or approximating more sophisticated lighting models if required by the visual style.
7.  **Three.js/R3F Integration**:
    *   Choose the appropriate material: `ShaderMaterial` (for extending existing Three.js chunks) or `RawShaderMaterial` (for full control, requiring manual matrix/attribute handling).
    *   Pass dynamic data from React/JavaScript via `uniforms`. Structure uniforms clearly.
    *   Utilize built-in Three.js uniforms and attributes (`projectionMatrix`, `modelViewMatrix`, `normalMatrix`, `position`, `normal`, `uv`) correctly.
    *   Ensure proper disposal of custom `ShaderMaterial` or `RawShaderMaterial` instances if they are created dynamically, along with any associated custom `BufferGeometry`. (See <id>1_technical_stack_rules/15-r3f-threejs</id>)
</guidelines>

<implementation>
-   **Language**: GLSL (OpenGL Shading Language) versions compatible with WebGL 2 (typically `#version 300 es`).
-   **Environment**: Integrated within Three.js materials (`ShaderMaterial`, `RawShaderMaterial`) used in R3F components.
-   **File Types**: Shader code can reside in `.glsl`, `.vert`, `.frag` files or be embedded as strings within `.ts`/`.tsx` files.
-   **Tooling**: Consider tools like VS Code extensions for GLSL syntax highlighting and linting. Use browser developer tools (e.g., Spector.js) for debugging.
-   **Code Review**: Focus on mathematical correctness, performance implications (ALU vs texture, branching, expensive ops), code clarity, visual output, and proper integration with Three.js/R3F.
-   **AI Actions**:
    *   **Reject**: Obvious performance anti-patterns (e.g., heavy trig/texture lookups in loops) without strong justification.
    *   **Reject**: Use of inverse trigonometric functions (`asin`, `acos`, `atan`) where vector equivalents exist.
    *   **Suggest**: Replacing numerical derivatives with analytical ones for normals or anti-aliasing.
    *   **Suggest**: Using procedural techniques (noise, SDFs) instead of relying solely on textures for complex details.
    *   **Suggest**: Optimizing shader logic (e.g., pre-calculating values, simplifying expressions, using `mediump`).
    *   **Suggest**: Implementing analytical anti-aliasing using `fwidth`.
    *   **Suggest**: Using vector operations (dot, cross, reflect, normalize) instead of angle-based calculations.
    *   **Info**: Remind about GPU architecture basics (parallelism, branching cost) relevant to optimization.
</implementation>

<examples>
<positive title="✅ Correct: Efficient Vector Math">
```glsl
// Good: Using dot product for diffuse lighting factor
vec3 lightDir = normalize(u_lightPos - v_worldPosition);
float diffuse = max(dot(v_normal, lightDir), 0.0);

// Good: Using reflect for reflection vector
vec3 eyeDir = normalize(u_cameraPos - v_worldPosition);
vec3 reflectDir = reflect(-eyeDir, v_normal);
```
</positive>

<positive title="✅ Correct: Efficient SDF Primitive & Smooth Minimum">
```glsl
// Good: Compact sphere SDF
float sdSphere(vec3 p, float r) {
  return length(p) - r;
}

// Good: Smooth minimum for blending shapes
// k controls the smoothness
float opSmoothUnion(float d1, float d2, float k) {
    float h = clamp(0.5 + 0.5*(d2-d1)/k, 0.0, 1.0);
    return mix(d2, d1, h) - k*h*(1.0-h);
}
```
</positive>

<positive title="✅ Correct: Anti-Aliased Procedural Circle">
```glsl
// Good: Uses fwidth for smooth edge
float circle(vec2 uv, vec2 center, float radius) {
  float dist = length(uv - center);
  // Get pixel width of the distance function
  float fw = fwidth(dist);
  // Smoothstep over 1 pixel width for anti-aliasing
  return 1.0 - smoothstep(radius - fw, radius + fw, dist);
}
```
</positive>

<positive title="✅ Correct: R3F ShaderMaterial Integration">
```typescript
// In a React Component ('use client')
import * as THREE from 'three';
import { useMemo } from 'react';
import { useFrame } from '@react-three/fiber';

const vertexShader = /* glsl */ `
  varying vec2 vUv;
  void main() {
    vUv = uv;
    gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
  }
`;

const fragmentShader = /* glsl */ `
  uniform float uTime;
  varying vec2 vUv;
  void main() {
    float color = 0.5 + 0.5 * sin(vUv.x * 10.0 + uTime);
    gl_FragColor = vec4(vec3(color), 1.0);
  }
`;

function MyShaderComponent() {
  const materialRef = useRef<THREE.ShaderMaterial>(null!)

  const uniforms = useMemo(() => ({
      uTime: { value: 0.0 }
  }), []);

  useFrame((state) => {
      if(materialRef.current) {
          materialRef.current.uniforms.uTime.value = state.clock.elapsedTime;
      }
  });

  return (
    <mesh>
      <planeGeometry args={[2, 2]} />
      <shaderMaterial
        ref={materialRef}
        vertexShader={vertexShader}
        fragmentShader={fragmentShader}
        uniforms={uniforms}
      />
    </mesh>
  );
}
```
</positive>

<negative title="❌ Incorrect: Performance Anti-Patterns">
```glsl
// Bad: Using atan2 for angle calculation - often slow and unnecessary
float angle = atan(v_direction.y, v_direction.x);
if (angle > PI_HALF) { ... }

// Bad: Unnecessary pow() call
float squaredDist = pow(length(pos - center), 2.0); // Just use dot(delta, delta)

// Bad: Texture lookup inside a loop without caching/optimization
vec3 finalColor = vec3(0.0);
for (int i = 0; i < 10; ++i) {
  finalColor += texture(u_someTexture, uv + vec2(float(i)*0.01)).rgb;
}

// Bad: Complex branching based on uniforms in fragment shader
uniform int u_mode;
void main() {
  vec3 color;
  if (u_mode == 1) { color = calcMode1(); }
  else if (u_mode == 2) { color = calcMode2(); } // Potential divergence
  else { color = calcMode3(); }
  gl_FragColor = vec4(color, 1.0);
}
```
</negative>
</examples>

<benefits>
-   Unlocks unique and highly customized visual effects.
-   Improves rendering performance through GPU optimization techniques.
-   Reduces reliance on large texture assets through procedural generation.
-   Promotes deeper understanding of rendering pipelines and computer graphics mathematics.
-   Leads to more elegant, maintainable, and reusable shader code.
</benefits>

<scope>
Applies to all custom GLSL shader code (`.glsl`, `.vert`, `.frag` files or embedded strings) and its integration within JavaScript/TypeScript using Three.js materials (`ShaderMaterial`, `RawShaderMaterial`) in the R3F environment.
</scope>

<references>
-   [The Book of Shaders](https://thebookofshaders.com/)
-   [Inigo Quilez's Articles](https://iquilezles.org/articles/)
-   [WebGL GLSL Specification (ES 3.0)](https://registry.khronos.org/OpenGL/specs/es/3.0/GLSL_ES_Specification_3.00.pdf)
-   [Three.js Materials Documentation](https://threejs.org/docs/#api/en/materials/Material)
-   [R3F `shaderMaterial` helper](https://github.com/pmndrs/drei#shadermaterial)
-   <id>1_technical_stack_rules/15-r3f-threejs</id>
</references>

</rule>
